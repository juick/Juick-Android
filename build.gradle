buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.+'
    }
}

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-v4:23.1.+'
    compile 'com.android.support:design:23.1.+'
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.neovisionaries:nv-websocket-client:1.12'
    compile 'com.google.android.gms:play-services-gcm:8.3.0'
}

android {
    compileSdkVersion "Google Inc.:Google APIs:23"
    buildToolsVersion "23.0.2"
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 45
        versionName '3.1'
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    // signing config
    if (file("keystore.properties").exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file("keystore.properties")))

        signingConfigs {
            release {
                storeFile file(props["key.store"])
                storePassword props["key.store.password"]
                keyAlias props["key.alias"]
                keyPassword props["key.alias.password"]
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                signingConfig signingConfigs.release
            }
        }
    }
    applicationVariants.all { variant ->
        println "*********" + variant.description + "**********";
        def apkName = "Juick.apk";
        variant.outputs.each { output ->
            output.outputFile = file(apkName)
        }
    }
}
