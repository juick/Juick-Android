buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'com.android.support:design:24.0.0'
    compile 'com.android.support:cardview-v7:24.0.0'
    compile 'com.android.support:appcompat-v7:24.0.0'
    compile 'com.neovisionaries:nv-websocket-client:1.28'
    compile 'com.google.android.gms:play-services-gcm:9.0.2'
    compile 'com.jakewharton:disklrucache:2.0.2'
    apt 'com.bluelinelabs:logansquare-compiler:1.3.7'
    compile 'com.bluelinelabs:logansquare:1.3.7'
    compile "com.github.aurae.retrofit2:converter-logansquare:1.4.1"
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.3.1'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'co.lujun:androidtagview:1.0.3'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.facebook.rebound:rebound:0.3.8'
    compile 'de.hdodenhof:circleimageview:1.3.0'
}

android {
    compileSdkVersion "Google Inc.:Google APIs:23"
    //noinspection GradleDependency
    buildToolsVersion '23.0.2'
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 45
        versionName '3.1'
        applicationId "com.juick"
        buildConfigField "String", "API_ENDPOINT", '"https://api.juick.com/"'
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
    }
    // signing config
    if (file("keystore.properties").exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file("keystore.properties")))

        signingConfigs {
            release {
                storeFile file(props["key.store"])
                storePassword props["key.store.password"]
                keyAlias props["key.alias"]
                keyPassword props["key.alias.password"]
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                signingConfig signingConfigs.release
            }
        }
    }
    applicationVariants.all { variant ->
        println "*********" + variant.description + "**********";
        def apkName = "Juick.apk";
        variant.outputs.each { output ->
            output.outputFile = file(apkName)
        }
    }
    dexOptions {
        incremental true
    }
}
