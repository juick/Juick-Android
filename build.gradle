plugins {
    alias libs.plugins.androidApplication
    alias libs.plugins.kotlin
    alias libs.plugins.kotlin.plugin.parcelize
    alias libs.plugins.kotlin.plugin.serialization
    alias libs.plugins.kotlin.plugin.compose
    alias libs.plugins.google.services
    alias libs.plugins.huawei.connect
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdk 35
    defaultConfig {
        targetSdkVersion 35
        minSdkVersion 24
        versionCode 237
        versionName "3.2." + versionCode
        applicationId "com.juick"
        namespace "com.juick"
        vectorDrawables.useSupportLibrary true
        def addConstant = {constantName, constantValue ->
            manifestPlaceholders += [ (constantName):constantValue]
            buildConfigField "String", "${constantName}", "\"${constantValue}\""
        }
        addConstant("API_ENDPOINT", "https://api.juick.com/")
        addConstant("EVENTS_ENDPOINT", "https://juick.com/api/events")
        addConstant("INTENT_NEW_EVENT_ACTION", "com.juick.NEW_EVENT_ACTION")

        buildConfigField "boolean", "HIDE_NSFW", "false"
        buildConfigField "boolean", "ENABLE_COMPOSE_UI", "false"
        buildConfigField "boolean", "ENABLE_UPDATER", "true"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testHandleProfiling true
        testFunctionalTest true
    }
    buildFeatures {
        buildConfig true
        viewBinding true
        compose true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
        next {
            initWith debug
            buildConfigField "boolean", "ENABLE_COMPOSE_UI", "true"
        }
        store {
            initWith release
            buildConfigField "boolean", "ENABLE_UPDATER", "false"
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions += "notifications"
    productFlavors {
        google {
            dimension "notifications"
        }
        huawei {
            dimension "notifications"
            buildConfigField "boolean", "HIDE_NSFW", "true"
        }
        free {
            dimension "notifications"
        }
    }
    lint {
        abortOnError false
        checkDependencies true
        checkGeneratedSources true
        checkReleaseBuilds false
        disable "CoroutineCreationDuringComposition"
        disable "StateFlowValueCalledInComposition"
    }
    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            outputFileName = "Juick-${variant.flavorName}-v${variant.versionName}.apk"
        }
        variant.resValue "string", "applicationId", "${applicationId}"
        variant.resValue "string", "messages_provider_authority", "${applicationId}.messages"
        project.tasks.getByName('process' + variant.name.capitalize() + 'GoogleServices').enabled variant.name.contains('google')
    }
}

kotlin {
    jvmToolchain(17)
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

dependencies {
    implementation libs.kotlinx.serialization.json
    implementation libs.core.ktx
    implementation libs.appcompat
    implementation libs.browser
    implementation libs.navigation.fragment.ktx
    implementation libs.navigation.ui.ktx
    implementation libs.savedstate.ktx
    implementation libs.swiperefreshlayout
    implementation libs.lifecycle.viewmodel.compose
    implementation libs.lifecycle.extensions

    implementation libs.material

    // Sign in with Google
    googleImplementation libs.credentials.play.services.auth
    googleImplementation libs.play.services.auth
    googleImplementation libs.googleid

    // Firebase platform
    googleImplementation platform(libs.firebase.bom)
    googleImplementation libs.firebase.messaging

    implementation libs.okhttp
    implementation libs.logging.interceptor
    freeImplementation libs.oksse

    implementation libs.retrofit
    implementation libs.converter.kotlinx.serialization

    implementation libs.chatkit
    huaweiImplementation libs.push

    implementation libs.fragmentviewbindingdelegate.kt

    implementation libs.android.image.cropper

    // Compose
    nextImplementation libs.activity.compose
    nextImplementation libs.constraintlayout.compose
    nextImplementation platform(libs.compose.bom)
    nextImplementation libs.ui
    nextImplementation libs.ui.graphics
    nextImplementation libs.ui.viewbinding
    nextImplementation libs.ui.tooling.preview
    nextImplementation libs.material.icons.extended
    nextImplementation libs.material3
    nextImplementation libs.ui.tooling
    // Core library
    androidTestImplementation libs.test.core.ktx

    // Assertions
    androidTestImplementation libs.junit
    androidTestImplementation libs.truth

    androidTestImplementation libs.espresso.core
    // Espresso intents for intercepting ACTION_VIEW
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    // Fragment testing helpers (launchFragmentInContainer)
    androidTestImplementation 'androidx.fragment:fragment-testing:1.5.7'
    // UI Automator
    androidTestImplementation libs.uiautomator.v18
}
